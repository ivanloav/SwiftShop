name: Deploy to EC2

on:
  push:
    branches:
      - main # Rama principal para despliegue

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout el código desde GitHub
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache para node_modules del backend
      - name: Cache Backend node_modules
        uses: actions/cache@v2
        with:
          path: backend/node_modules
          key: backend-${{ runner.os }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            backend-${{ runner.os }}-

      # Cache para node_modules del frontend
      - name: Cache Frontend node_modules
        uses: actions/cache@v2
        with:
          path: frontend/node_modules
          key: frontend-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            frontend-${{ runner.os }}-

      # Copiar los archivos vía SCP
      - name: Copy files via SCP
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "/home/ubuntu/SwiftShop"

      # Ejecutar los comandos de despliegue vía SSH
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Cambia al directorio del proyecto
            cd /home/ubuntu/SwiftShop

            # Actualiza el repositorio desde GitHub
            git pull origin main

            # Instala las dependencias del backend
            cd backend
            npm install  # Usa el cache si existe
            pm2 restart backend  # Reinicia el backend con PM2

            # Construir el frontend solo si hay cambios
            cd ../frontend
            npm install  # Usa el cache si existe
            npm run build  # Construye el frontend

            # Copia el frontend compilado a Nginx
            sudo cp -r dist/* /var/www/html/

            # Verifica la configuración de Nginx y reinicia
            sudo nginx -t
            sudo systemctl restart nginx
